{"version":3,"sources":["components/Common/Footer.js","components/Common/InputField.js","actions/actionTypes.js","reducers/jokes.js","reducers/index.js","config/store.js","helpers/helper.js","components/Common/List.js","components/Common/Card.js","components/Common/SearchBox.js","components/Common/Menu.js","components/Common/HeaderMenu.js","components/Common/Header.js","actions/jokes.js","components/Common/Button.js","components/AllJokes/CategoryFilter.js","components/Common/Label.js","components/AllJokes/JokeContent.js","components/Common/Cards.js","components/Common/Loading.js","containers/AllJokesContainer.js","components/Common/NavButton.js","components/SingleJoke/PopularityLabel.js","components/SingleJoke/JokeStatContent.js","components/SingleJoke/VoteButton.js","components/SingleJoke/VotesCounter.js","components/SingleJoke/NavigationButtons.js","containers/SingleJokeContainer.js","App.js","serviceWorker.js","index.js"],"names":["Footer","className","src","alt","InputField","props","type","placeholder","name","onChange","onFocus","onFocusOut","ev","onBlur","defaultProps","UPDATE_SELECTED_CATEGORY","GET_ALL_JOKES","GET_ALL_JOKES_FULFILLED","GET_CATEGORIES_FULFILLED","GET_JOKE","UPDATE_VOTES","initialState","list","selectedJoke","categories","popularity","isLoading","selectedCategory","votedIds","jokes","state","action","actionTypes","payload","data","appJokes","addRandomVotes","result","sortByPopularity","newSelectedJoke","updatedList","find","joke","id","reducer","combineReducers","toastr","toastrReducer","form","formReducer","jokesReducer","store","createStore","applyMiddleware","promise","generateRandomInt","max","Math","floor","random","jokesList","sort","a","b","likes","map","dislikes","truncateText","text","value","slice","filterJokes","category","filter","List","title","customContent","classnames","cx","linkClassnames","content","length","item","key","to","Card","hide","trianglePosition","onMouseCardLeave","isMessageBox","isMenu","cardclasses","cardContentClasses","onMouseLeave","evt","SearchBox","handleSubmit","useState","setJokes","images","image","setImage","hideCard","setHide","hideBox","document","querySelector","classList","remove","add","target","setTimeout","onSubmit","newList","str","toLowerCase","search","searchJoke","onClick","Menu","toggleBox","href","onMouseEnter","toggle","role","HeaderMenu","showMbMenu","toggleMbMenu","menuListLv1","mobileClasses","Header","updateSelectedCategory","dispatch","getJoke","jokeId","getState","selectJoke","j","vote","newLikes","newDislikes","getAllJokes","axios","get","getCategories","Button","iconPosition","iconPath","border","buttonType","handleOnClick","categoryList","align","push","isUnknown","includes","classes","btnTitleClasses","CategoryFilter","showCategories","toggleCategories","buttons","index","k","buttonClass","chooseAndClose","Label","labelContent","left","bullet","JokeContent","description","icon","Cards","cardsContent","viewMoreFunction","viewMore","cards","cardContent","jokeContent","keyIndex","categoryHasJokes","Loading","AllJokesContainer","filterJoke","bind","resetDisplayIndex","updateCategory","displayJokeIndex","jokesToDisplay","prevProps","this","setState","jokeIndex","filteredList","slicedJokesList","Component","connect","NavButton","navButtonClass","PopularityLabel","labelValue","votes","label","modifier","getPopularityLabel","JokeStatContent","catArray","findIndex","getJokeIndexById","VoteButton","handleClick","count","imagePath","handClassnames","VotesCounter","NavigationButtons","previousJoke","nextJoke","SingleJokeContainer","goBack","voteJoke","match","params","history","currentJokeId","forEach","getJokeNextIndex","getJokePrevIndex","alert","topList","withRouter","App","path","component","Boolean","window","location","hostname","ReactDOM","render","timeOut","newestOnTop","position","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a4c27924.chunk.js","sourcesContent":["import React from 'react';\n\nconst Footer = () => (\n  <footer className=\"footer\">\n    <div className=\"container\">\n      <p className=\"footer__message\">\n        GOT JOKES? GET PAID\n        <br />\n        FOR SUBMITTING!\n      </p>\n      <span className=\"footer__submit\">\n        <h3>SUBMIT JOKE</h3>\n        <img src=\"/images/arrow-r.png\" alt=\"submit joke\" />\n      </span>\n    </div>\n  </footer>\n);\n\nexport default Footer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst proptypes = {\n  name: PropTypes.string,\n  placeholder: PropTypes.string,\n  type: PropTypes.string,\n  inputValue: PropTypes.string,\n  onChange: PropTypes.func,\n  onFocus: PropTypes.func,\n  onFocusOut: PropTypes.func,\n};\n\nconst defaultProps = {\n  name: '',\n  type: '',\n  placeholder: '',\n  onFocus: () => {\n  },\n  onFocusOut: () => {\n  },\n  onChange: () => {\n  },\n};\n\nconst InputField = (props) => {\n  const {\n    type,\n    placeholder,\n    name,\n    onChange,\n    onFocus,\n    onFocusOut,\n  } = props;\n\n  return (\n    <div className=\"input-field\">\n      <input\n        type={type}\n        placeholder={placeholder}\n        name={name}\n        onChange={onChange}\n        onFocus={(ev) => onFocus(ev)}\n        onBlur={(ev) => onFocusOut(ev)}\n      />\n    </div>\n  );\n};\n\nInputField.propTypes = proptypes;\nInputField.defaultProps = defaultProps;\n\nexport default InputField;\n","export const UPDATE_SELECTED_CATEGORY = 'jokes/UPDATE_SELECTED_CATEGORY';\nexport const GET_CATEGORIES = 'jokes/GET_CATEGORIES';\nexport const GET_ALL_JOKES = 'jokes/GET_ALL_JOKES';\nexport const GET_ALL_JOKES_REJECTED = 'jokes/GET_ALL_JOKES_REJECTED';\nexport const GET_ALL_JOKES_FULFILLED = 'jokes/GET_ALL_JOKES_FULFILLED';\nexport const GET_CATEGORIES_FULFILLED = 'jokes/GET_CATEGORIES_FULFILLED';\nexport const GET_CATEGORY_REJECTED = 'jokes/GET_CATEGORY_REJECTED';\nexport const GET_JOKE = 'jokes/GET_JOKE';\nexport const UPDATE_VOTES = 'jokes/UPDATE_VOTES';\nexport const FILTER_CATEGORY = 'jolkes/FILTER_CATEGORY';\nexport const VIEW_MORE = 'jolkes/VIEW_MORE';\n","import * as actionTypes from '../actions/actionTypes';\n// eslint-disable-next-line\nimport { addRandomVotes, sortByPopularity } from '../helpers/helper';\n\n/*\njokes = [ {..jokes, position, dislikes, likes } ];\n */\nconst initialState = {\n  list: [],\n  selectedJoke: null,\n  categories: [],\n  popularity: [],\n  isLoading: false,\n  selectedCategory: 'animal',\n  votedIds: [],\n};\n\nfunction jokes(state = initialState, action) {\n  switch (action.type) {\n    case actionTypes.GET_CATEGORIES_FULFILLED: {\n      const categories = action.payload.data;\n      return { ...state, categories };\n    }\n\n    case actionTypes.UPDATE_SELECTED_CATEGORY: {\n      return { ...state, selectedCategory: action.payload };\n    }\n\n    case actionTypes.GET_ALL_JOKES:\n      return { ...state, isLoading: true };\n\n    case actionTypes.GET_ALL_JOKES_FULFILLED: {\n      const appJokes = addRandomVotes(action.payload.data.result);\n      const jokesSortedByPopularity = sortByPopularity(appJokes);\n      return {\n        ...state,\n        isLoading: false,\n        list: jokesSortedByPopularity,\n      };\n    }\n\n    case actionTypes.GET_JOKE: {\n      // we are not getting the joke from the endpoint, but from the list of jokes\n      return {\n        ...state,\n        selectedJoke: action.payload,\n        isLoading: false,\n      };\n    }\n\n    case actionTypes.UPDATE_VOTES: {\n      const newSelectedJoke = action.payload.updatedList.find(\n        (joke) => (joke.id === action.payload.id),\n      );\n      return {\n        ...state,\n        list: [...action.payload.updatedList],\n        votedIds: [...state.votedIds, action.payload.id],\n        selectedJoke: newSelectedJoke,\n      };\n    }\n    default:\n      return state;\n  }\n}\n\nexport default jokes;\n","import { combineReducers } from 'redux';\nimport { reducer as toastrReducer } from 'react-redux-toastr';\nimport formReducer from 'redux-form/es/reducer';\nimport jokesReducer from './jokes';\n\nconst reducer = combineReducers({\n  toastr: toastrReducer,\n  form: formReducer,\n  jokes: jokesReducer,\n});\n\nexport default reducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport promise from 'redux-promise-middleware';\nimport reducer from '../reducers';\n\nconst store = createStore(reducer, applyMiddleware(promise));\n\nexport default store;\n","import store from '../config/store';\n\nconst generateRandomInt = (max) => (Math.floor(Math.random() * Math.floor(max))\n);\n\nexport const sortByPopularity = (jokesList) => (jokesList.sort((a, b) => (\n  (a.likes < b.likes) ? 1 : -1\n)));\n\nexport const addRandomVotes = (jokesList) => jokesList.map((joke) => ({\n  ...joke,\n  likes: generateRandomInt(1000),\n  dislikes: generateRandomInt(1000),\n}));\n\nexport const getPopularityLabel = (likes, dislikes) => {\n  const votes = typeof likes === 'number' && typeof dislikes === 'number';\n  if (!votes) {\n    return { label: 'chesnut', modifier: 'chesnut' };\n  }\n\n  switch (votes) {\n    case (dislikes > likes):\n      return { label: 'chesnut', modifier: 'chesnut' };\n    case (likes >= 0 && likes <= 50):\n      return { label: 'New in town', modifier: 'new-in-town' };\n    case (likes >= 51 && likes <= 100):\n      return { label: 'Trending', modifier: 'trending' };\n    case (likes >= 101):\n      return { label: 'Hall of fame', modifier: 'hall-of-fame' };\n    default:\n      return '';\n  }\n};\n\nexport const getJokeIndexById = (id) => {\n  const { jokes: { list } } = store.getState();\n  return list.findIndex((joke) => (joke.id === id));\n};\n\nexport const truncateText = (text, value = 30) => (`${text.slice(0, value)}...`);\n\nexport const getFromLocalStorage = () => {\n  const jokes = localStorage.get('jokes');\n  return JSON.parse(jokes);\n};\n\nexport const saveInLocalStorage = (data) => {\n  const stringJokes = JSON.stringify(data);\n  localStorage.setItem('jokes', stringJokes);\n};\n\nexport const getCategory = (catArray) => (catArray.length > 0 ? catArray[0] : 'Uncategorized');\n\nexport const searchJoke = (str, list) => {\n  const searched = list.filter((joke) => {\n    const val = joke.value.toLowerCase().search(str.toLowerCase());\n    return (val !== -1);\n  });\n  return searched;\n};\n\nexport const filterJokes = (category, jokesList) => (jokesList.filter((joke) => (\n  joke.categories[0] === category\n)));\n\nexport const getJokeNextIndex = (currentJokeId) => {\n  const { jokes: { list } } = store.getState();\n  let jokeIndex = null;\n\n  list.forEach((item, index) => {\n    if (currentJokeId === item.id) {\n      jokeIndex = index;\n    }\n  });\n  jokeIndex += 1;\n  if (list[jokeIndex]) {\n    return jokeIndex;\n  }\n  return null;\n};\n\nexport const getJokePrevIndex = (currentJokeId) => {\n  const { jokes: { list } } = store.getState();\n  let jokeIndex = null;\n\n  list.forEach((item, index) => {\n    if (currentJokeId === item.id) {\n      jokeIndex = index;\n    }\n  });\n  jokeIndex -= 1;\n  if (list[jokeIndex]) {\n    return jokeIndex;\n  }\n  return null;\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport cx from 'classnames';\nimport { truncateText } from '../../helpers/helper';\n\nconst proptypes = {\n  type: PropTypes.string,\n  title: PropTypes.string, // the data has no title, this will be the joke truncated\n  list: PropTypes.array, // {id, value, url}\n  customContent: PropTypes.any,\n};\n\n/*\n  list types : menu, search , display\n */\n\nconst defaultProps = {\n  type: 'display',\n  title: null,\n  list: [],\n  customContent: '',\n};\n\nconst List = (props) => {\n  const {\n    title,\n    list,\n    type,\n    customContent\n  } = props;\n\n  const classnames = cx({\n    'list__content': true,\n    [`list__content--${type}`]: true,\n  });\n  const linkClassnames = cx({\n    'list__link': true,\n    'list__link--search': type === 'search',\n  });\n  let content = null;\n  if (list.length > 0) {\n    content = list.map((item) => (\n      <div className={linkClassnames} key={item.id}>\n        <Link to={`/joke/${item.id}`}>\n          {truncateText(item.value, 30)}\n        </Link>\n        <br />\n      </div>\n    ));\n  } else {\n    content = customContent;\n  }\n\n  return (\n    <div className=\"list\">\n      {title\n      && (\n        <h2 className=\"list__title\">\n          {title}\n        </h2>\n      )}\n      <div className={classnames}>\n        {content}\n      </div>\n    </div>\n  );\n};\n\nList.propTypes = proptypes;\nList.defaultProps = defaultProps;\n\nexport default List;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nconst proptypes = {\n  type: PropTypes.string,\n  content: PropTypes.any,\n  trianglePosition: PropTypes.string,\n  hide: PropTypes.bool,\n  onMouseCardLeave: PropTypes.func,\n\n};\n\n/*\n  card types: simple, messagebox, menu\n  trianglePosition: right, left, center\n */\nconst defaultProps = {\n  type: 'simple',\n  content: '',\n  trianglePosition: 'right',\n  hide: false,\n  onMouseCardLeave: () => {},\n};\n\nconst Card = (props) => {\n  const {\n    type,\n    content,\n    hide,\n    trianglePosition,\n    onMouseCardLeave\n  } = props;\n  const isMessageBox = type === 'messagebox';\n  const isMenu = type === 'menu';\n\n  const cardclasses = cx({\n    'card': true,\n    [`card--${type}`]: true,\n    [`card--triangle-${trianglePosition}`]: isMessageBox || isMenu,\n    'card--hide': isMessageBox || isMenu,\n    'card--show': (isMessageBox || isMenu) && !hide,\n  });\n\n  const cardContentClasses = cx({\n    'card__content': true,\n    'card__content--display': type === 'display',\n  });\n  return (\n    <div className={cardclasses} onMouseLeave={(evt) => onMouseCardLeave(evt)}>\n      <div className={cardContentClasses}>\n        {content}\n      </div>\n    </div>\n  );\n};\n\nCard.propTypes = proptypes;\nCard.defaultProps = defaultProps;\nexport default Card;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport InputField from './InputField';\nimport List from './List';\nimport Card from './Card';\nimport { searchJoke } from '../../helpers/helper';\n\nconst proptypes = {\n  title: PropTypes.string,\n  name: PropTypes.string,\n  type: PropTypes.string,\n  placeholder: PropTypes.string,\n  jokes: PropTypes.array,\n};\n\nconst defaultProps = {\n  title: 'search',\n  name: 'searchbox',\n  type: 'text',\n  placeholder: '',\n  jokes: [],\n};\n\nconst SearchBox = (props) => {\n  const {\n    handleSubmit,\n    placeholder,\n    title,\n    name,\n    type,\n    jokes,\n  } = props;\n\n  const [jokesList, setJokes] = useState([]);\n  const images = {\n    white: '/images/search.png',\n    black: '/images/search-b.png'\n  };\n  const [image, setImage] = useState(images.white);\n  const [hideCard, setHide] = useState(true);\n\n\n  const search = (evt) => {\n    const newList = searchJoke(evt.target.value, jokes);\n    setJokes(newList);\n  };\n\n  const showBox = () => {\n    const focusClass = 'search-box--focused';\n    const unfocusClass = 'search-box--unfocused';\n    document.querySelector('.search-box').classList.remove(unfocusClass);\n    document.querySelector('.search-box').classList.add(focusClass);\n    setImage(images.black);\n    setHide(false);\n  };\n\n  const hideBox = (evt) => {\n    const focusClass = 'search-box--focused';\n    const unfocusClass = 'search-box--unfocused';\n    document.querySelector('.search-box').classList.remove(focusClass);\n    document.querySelector('.search-box').classList.add(unfocusClass);\n    setImage(images.white);\n    if (evt.target.value === '') {\n      setJokes([]);\n    }\n    setTimeout(() => {\n      setHide(true);\n    }, 300);\n  };\n  const list = (jokesList.length > 0 ? <List list={jokesList} type=\"search\" /> : <p> No results </p>);\n  return (\n    <div className=\"search-box\">\n      <form className=\"search-box__form\" onSubmit={handleSubmit}>\n        <div className=\"search-box__input-field\">\n          <InputField\n            title={title}\n            name={name}\n            type={type}\n            onChange={(evt) => {\n              if (evt.target.value !== '') {\n                showBox();\n              } else {\n                hideBox(evt);\n              }\n              search(evt);\n            }}\n            onFocusOut={hideBox}\n            placeholder={placeholder}\n          />\n        </div>\n        <div className=\"search-box__button\">\n          <img\n            src={image}\n            onClick={handleSubmit}\n            alt=\"search\"\n          />\n        </div>\n      </form>\n      <div className=\"search-box__box-list-container\">\n        <Card\n          content={list}\n          type=\"messagebox\"\n          trianglePosition=\"left\"\n          hide={hideCard}\n        />\n      </div>\n    </div>\n  );\n};\n\nSearchBox.propTypes = proptypes;\nSearchBox.defaultProps = defaultProps;\n\nexport default SearchBox;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Card from './Card';\n\nconst proptypes = {\n  toggle: PropTypes.func,\n};\n\nconst defaultProps = {\n  toggle: () => {\n  },\n};\n\nconst Menu = (props) => {\n  const [hideBox, toggleBox] = useState(true);\n  const list = (\n    <div className=\"card__custom-menu-content\">\n      <a href=\"/\" alt=\"link\">My pubished jokes</a>\n      <a href=\"/\" alt=\"link\">My saved jokes</a>\n      <a href=\"/\" alt=\"link\">Account information</a>\n      <a href=\"/\" alt=\"link\">Publish new joke</a>\n    </div>\n  );\n  const onCardMouseLeave = () => {\n    toggleBox(true);\n  };\n  return (\n    <div className=\"main-navigation\">\n      <nav className=\"main-navigation__desktop\">\n        <a href=\"/\">SO FUNKTIONIERT&rsquo;S</a>\n        <a href=\"/\">SONDERANGEBOTE</a>\n        <a href=\"/\" onMouseEnter={() => toggleBox(false)}>\n          <img src=\"/images/man-shape.png\" alt=\"mein bereich\" />\n          MEIN BEREICH\n          <img src=\"/images/path-down.png\" alt=\"mein berich\" />\n        </a>\n        <Card\n          content={list}\n          type=\"menu\"\n          trianglePosition=\"right\"\n          hide={hideBox}\n          onMouseCardLeave={onCardMouseLeave}\n        />\n      </nav>\n      <div className=\"main-navigation__mobile\">\n        <div\n          className=\"main-navigation__mobile-wrapper\"\n          onClick={() => (props.toggle())}\n          role=\"button\"\n        >\n          <img className=\"main-navigation__burger\" src=\"/images/burger.png\" alt=\"menu\" />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nMenu.defaultProps = defaultProps;\nMenu.propTypes = proptypes;\n\nexport default Menu;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport cx from 'classnames';\nimport Menu from './Menu';\nimport List from './List';\n\nconst HeaderMenu = () => {\n  const [showMbMenu, toggleMbMenu] = useState(false);\n  const menuListLv1 = (\n    <>\n      <a href=\"/\">SO FUNKTIONIERT&lsquo;`S</a>\n      <a href=\"/\">SONDERANGEBOTE</a>\n      <a href=\"/\">\n        MEIN BEREICH\n      </a>\n    </>\n  );\n  const mobileClasses = cx({\n    'main-navigation__mobile-menu-content': true,\n    'main-navigation__mobile-menu-content--show': showMbMenu,\n  });\n\n  const toggleMenu = () => {\n    toggleMbMenu(!showMbMenu);\n  };\n\n  return (\n    <>\n      <header className=\"header-menu\">\n        <div className=\"container\">\n          <div className=\"grid\">\n            <div className=\"grid__item-col grid__item-col--2\">\n              <Link to=\"/\">\n                <img\n                  className=\"header-menu header-menu__logo\"\n                  src=\"/images/logo-v.png\"\n                  alt=\"logo\"\n                />\n              </Link>\n            </div>\n            <div className=\"grid__item-col grid__item-col--10\">\n              <Menu content={menuListLv1} toggle={toggleMenu} />\n            </div>\n          </div>\n        </div>\n      </header>\n      <div className={mobileClasses}>\n        <List type=\"menu\" customContent={menuListLv1} />\n      </div>\n    </>\n  );\n};\n\nexport default HeaderMenu;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport SearchBox from './SearchBox';\nimport HeaderMenu from './HeaderMenu';\n\nconst proptypes = {\n  jokes: PropTypes.array,\n};\n\nconst defaultProps = {\n  jokes: [],\n};\n\nconst Header = (props) => (\n  <>\n    <HeaderMenu />\n    <div className=\"header\">\n      <h1 className=\"header__title\"> The Joke Bible</h1>\n      <h2 className=\"header__subtitle\">Daily Laughs for you and yours</h2>\n      <SearchBox\n        jokes={props.jokes}\n        placeholder=\"How can we make you laugh today?\"\n      />\n    </div>\n  </>\n);\n\nHeader.propTypes = proptypes;\nHeader.defaultProps = defaultProps;\n\nexport default Header;\n","import axios from 'axios';\nimport store from '../config/store';\nimport * as actionTypes from './actionTypes';\n\nexport const updateSelectedCategory = (category) => {\n  store.dispatch({\n    type: actionTypes.UPDATE_SELECTED_CATEGORY,\n    payload: category,\n  });\n};\n\nconst selectJoke = (joke) => {\n  store.dispatch({\n    type: actionTypes.GET_JOKE,\n    payload: joke,\n  });\n};\n\nexport const getJoke = (jokeId) => {\n  const { jokes: { list } } = store.getState();\n  if (!list || list.length < 1) {\n    return;\n  }\n  const joke = list.find((j) => (j.id === jokeId));\n  selectJoke(joke);\n};\n\nexport const vote = (selectedJoke, type) => {\n  const { jokes: { list } } = store.getState();\n  const newLikes = type === 'like' ? 1 : 0;\n  const newDislikes = type === 'dislike' ? 1 : 0;\n\n  const updatedList = list.map((joke) => {\n    if (joke.id === selectedJoke.id) {\n      return {\n        ...joke,\n        likes: (selectedJoke.likes + newLikes),\n        dislikes: (selectedJoke.dislikes + newDislikes),\n      };\n    }\n    return joke;\n  });\n  store.dispatch({\n    type: actionTypes.UPDATE_VOTES,\n    payload: { updatedList, id: selectedJoke.id },\n  });\n};\n\nexport const getAllJokes = () => {\n  store.dispatch({\n    type: actionTypes.GET_ALL_JOKES,\n    payload: axios.get('/api/jokes/search?query=all'),\n  });\n};\n\nexport const getCategories = () => {\n  store.dispatch({\n    type: actionTypes.GET_CATEGORIES,\n    payload: axios.get('/api/jokes/categories'),\n  });\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nconst proptypes = {\n  buttonType: PropTypes.string,\n  title: PropTypes.string,\n  iconPath: PropTypes.string,\n  border: PropTypes.bool,\n  categoryList: PropTypes.array,\n  handleOnClick: PropTypes.func,\n  align: PropTypes.string,\n};\n\n/*\n* button types :\n* page-button (border, primary color, transparent background)\n* {category}-button\n* */\n\nconst defaultProps = {\n  buttonType: 'page-button',\n  title: '',\n  categoryList: [],\n  border: false,\n  iconPath: null,\n  handleOnClick: () => {\n  },\n  align: null\n};\n\nconst Button = (props) => {\n  const categories = [];\n  const {\n    title,\n    iconPosition,\n    iconPath,\n    border,\n    buttonType,\n    handleOnClick,\n    categoryList,\n    align\n  } = props;\n\n  if (categoryList && categoryList.length > 0) {\n    categories.push(categoryList);\n  }\n  const isUnknown = !categories.includes(buttonType) && buttonType !== 'page-button';\n  const classes = cx({\n    'joke-button': true,\n    [`joke-button--${buttonType}`]: true,\n    'joke-button--unknown': !isUnknown,\n    'joke-button--border': border,\n    [`joke-button--${align}`]: !!align,\n  });\n\n  const btnTitleClasses = cx({\n    'joke-button__title': true,\n    'joke-button__title--has-icon': iconPath,\n  });\n\n  return (\n    <button\n      type=\"button\"\n      className={classes}\n      onClick={() => {\n        handleOnClick();\n      }}\n    >\n      <span className={btnTitleClasses}>\n        {iconPath && iconPosition === 'left'\n        && (\n        <img className=\"joke-button__icon joke-button__icon--left\" src={iconPath} alt={title} />\n        )}\n        {title}\n        {iconPath && iconPosition === 'right'\n        && (\n        <img className=\"joke-button__icon\" src={iconPath} alt={title} />\n        )}\n      </span>\n    </button>\n  );\n};\n\nButton.propTypes = proptypes;\nButton.defaultProps = defaultProps;\n\nexport default Button;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport Button from '../Common/Button';\n\nconst proptypes = {\n  categoryList: PropTypes.array.isRequired,\n  handleOnClick: PropTypes.func.isRequired,\n};\n\nconst CategoryFilter = (props) => {\n  const { categoryList, handleOnClick } = props;\n  const [showCategories, toggleCategories] = useState(false);\n  const buttons = categoryList.map((category, index) => {\n    const k = `${category}-${index}`;\n    const buttonClass = cx({\n      'category-filter__category-button': true,\n      'category-filter__category-button--show': showCategories,\n    });\n    const chooseAndClose = (category) => {\n      handleOnClick(category);\n      toggleCategories(!showCategories);\n    };\n    return (\n      <div className={buttonClass} key={k}>\n        <Button\n          buttonType={category}\n          title={category}\n          handleOnClick={() => (chooseAndClose(category))}\n          categoryList={categoryList}\n        />\n      </div>\n    );\n  });\n  buttons.push(\n    <div\n      className=\"category-filter__category-button category-filter__category-button--mb\"\n      key={`all-${buttons.length}`}\n    >\n      <Button\n        buttonType=\"all\"\n        title=\"view all\"\n        handleOnClick={() => (handleOnClick('all'))}\n        iconPath=\"/images/arrow-d.png\"\n      />\n    </div>,\n  );\n  return (\n    <div className=\"category-filter\">\n      <div className=\"category-filter__mb-button\">\n        <Button\n          buttonType=\"all\"\n          title=\"Categories\"\n          handleOnClick={() => toggleCategories(!showCategories)}\n          iconPath=\"/images/arrow-d.png\"\n        />\n      </div>\n      {buttons}\n    </div>\n  );\n};\n\nCategoryFilter.propTypes = proptypes;\n\nexport default CategoryFilter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nconst proptypes = {\n  labelContent: PropTypes.string,\n  type: PropTypes.string,\n  left: PropTypes.bool,\n  bullet: PropTypes.bool,\n};\n\nconst defaultProps = {\n  labelContent: '',\n  type: 'animal',\n  left: false,\n  bullet: false,\n\n};\n\nconst Label = (props) => {\n  const {\n    labelContent,\n    type,\n    left,\n    bullet\n  } = props;\n  const classes = cx({\n    'joke-label': true,\n    'joke-label--left': left,\n    [`joke-label--${type}`]: true,\n  });\n  return (\n    <div className={classes}>\n      <p>\n        {bullet\n        && (\n          <span>&bull;</span>\n        )}\n        {labelContent}\n      </p>\n    </div>\n  );\n};\n\nLabel.propTypes = proptypes;\nLabel.defaultProps = defaultProps;\n\nexport default Label;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\n\nconst proptypes = {\n  description: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  icon: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n\n};\n\nconst JokeContent = (props) => {\n  const {\n    description,\n    title,\n    icon,\n    id\n  } = props;\n  return (\n    <div className=\"joke-content\">\n      <h2 className=\"joke-content__title\">\n        <img className=\"joke-content__joke-icon\" src={icon} alt={title} />\n        {title}\n      </h2>\n      <p className=\"joke-content__description\">\n        {description}\n      </p>\n      <div className=\"joke-content__stat-link\">\n        <Link to={`/joke/${id}`}>\n          SEE STAT\n          <span>\n            <img src=\"/images/arrow-r.png\" alt=\"see stat\" />\n          </span>\n        </Link>\n\n      </div>\n\n    </div>\n  );\n};\n\nJokeContent.propTypes = proptypes;\n\nexport default JokeContent;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Card from './Card';\nimport Label from './Label';\nimport JokeContent from '../AllJokes/JokeContent';\nimport Button from './Button';\n\nconst proptypes = {\n  cardsContent: PropTypes.array.isRequired,\n  viewMoreFunction: PropTypes.func,\n  viewMore: PropTypes.bool,\n  selectedCategory: PropTypes.string,\n};\n\nconst defaultProps = {\n  viewMore: true,\n  viewMoreFunction: () => {\n  },\n  selectedCategory: ','\n};\n\nconst Cards = (props) => {\n  const {\n    cardsContent,\n    viewMoreFunction,\n    viewMore,\n    selectedCategory\n  } = props;\n\n  const jokeContents = cardsContent.map((cardContent) => {\n    const category = (cardContent.categories.length > 0) ? cardContent.categories : ['Unknown'];\n    return (\n      <JokeContent\n        description={cardContent.value}\n        title={category[0]}\n        icon=\"/images/green-light.png\"\n        id={cardContent.id}\n      />\n    );\n  });\n  const cards = jokeContents.map((jokeContent, index) => {\n    const keyIndex = `card-${index}`;\n    return (\n      <div className=\"grid__item-col--4 grid__mb-item-col--12\" key={keyIndex}>\n        <Card\n          content={jokeContent}\n        />\n      </div>\n    );\n  });\n  const categoryHasJokes = cards.length > 1;\n  return (\n    <div className=\"cards\">\n      <Label labelContent={`${selectedCategory} jokes`} type={selectedCategory} />\n      {categoryHasJokes\n      && (\n        <div className=\"cards__content\">\n          <div className=\"grid\">\n            {cards}\n          </div>\n        </div>\n      )}\n      {!categoryHasJokes\n      && (\n        <div className=\"cards__message\">\n          <p>\n            No Jokes for\n            {selectedCategory}\n            ..\n          </p>\n        </div>\n      )}\n      {viewMore && categoryHasJokes\n      && (\n        <div className=\"cards__more-button\">\n          <Button\n            handleOnClick={viewMoreFunction}\n            title=\"View More\"\n            iconPath=\"/images/arrow-d.png\"\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nCards.propTypes = proptypes;\nCards.defaultProps = defaultProps;\n\nexport default Cards;\n","import React from 'react';\n\nconst Loading = () => (\n  <div>\n    <p>\n      Loading...\n    </p>\n  </div>\n);\n\nexport default Loading;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport {\n  getAllJokes,\n  getCategories,\n  updateSelectedCategory\n} from '../actions/jokes';\nimport CategoryFilter from '../components/AllJokes/CategoryFilter';\nimport Cards from '../components/Common/Cards';\nimport Loading from '../components/Common/Loading';\nimport { filterJokes } from '../helpers/helper';\n\n\nclass AllJokesContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.filterJoke = this.filterJoke.bind(this);\n    this.viewMore = this.viewMore.bind(this);\n    this.resetDisplayIndex = this.resetDisplayIndex.bind(this);\n    this.updateCategory = this.updateCategory.bind(this);\n    this.state = {\n      categoryList: [],\n      displayJokeIndex: 3,\n      jokesToDisplay: null,\n    };\n  }\n\n  componentDidMount() {\n    getAllJokes();\n    getCategories();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { categoryList, jokes } = this.props;\n    if (categoryList !== prevProps.categoryList) {\n      this.updateCategory(categoryList);\n    }\n    if (this.state.jokesToDisplay === null && prevProps.jokes.list !== jokes.list) {\n      this.filterJoke('all');\n    }\n  }\n\n  updateCategory(categoryList) {\n    this.setState({\n      categoryList,\n    });\n  }\n\n  resetDisplayIndex() {\n    this.setState(() => ({ displayJokeIndex: 3 }));\n    return this.state.displayJokeIndex;\n  }\n\n  filterJoke(type, viewMore = false) {\n    const { jokes } = this.props;\n    const jokeIndex = viewMore ? this.state.displayJokeIndex + 3 : this.resetDisplayIndex();\n    const filteredList = type === 'all' ? jokes.list : filterJokes(type, jokes.list);\n    const slicedJokesList = filteredList.slice(0, jokeIndex);\n    updateSelectedCategory(type);\n    this.setState({\n      jokesToDisplay: slicedJokesList,\n      displayJokeIndex: jokeIndex,\n    });\n  }\n\n  viewMore() {\n    const { selectedCategory } = this.props;\n    this.filterJoke(selectedCategory, true);\n  }\n\n  render() {\n    const { isLoading, selectedCategory } = this.props;\n\n    if (isLoading) {\n      return (\n        <Loading />\n      );\n    }\n    return (\n      <div className=\"grid\">\n        <div className=\"grid__item-col grid__item-col--12\">\n          <CategoryFilter handleOnClick={this.filterJoke} categoryList={this.state.categoryList} />\n        </div>\n        <div className=\"grid__item-col grid__item-col--12\">\n          {this.state.jokesToDisplay\n          && (\n            <Cards\n              cardsContent={this.state.jokesToDisplay}\n              viewMoreFunction={this.viewMore}\n              selectedCategory={selectedCategory}\n            />\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  (state) => ({\n    jokes: state.jokes,\n    isLoading: state.isLoading,\n    categoryList: state.jokes.categories,\n    selectedCategory: state.jokes.selectedCategory,\n  }),\n  {\n    updateSelectedCategory,\n    getCategories,\n    getAllJokes,\n  }\n)(AllJokesContainer);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '../Common/Button';\n\nconst proptypes = {\n  type: PropTypes.string,\n  handleOnClick: PropTypes.func,\n};\n\nconst defaultProptypes = {\n  type: 'back',\n  handleOnClick: () => {\n  }\n};\n\nconst NavButton = (props) => {\n  const { type, handleOnClick } = props;\n\n  const navButtonClass = `nav-button nav-button--${type}`;\n\n\n  return (\n    <>\n      <div\n        className={navButtonClass}\n        onClick={() => (handleOnClick())}\n        role=\"button\"\n      >\n        <img src=\"/images/arrow-left.png\" alt={type} />\n      </div>\n      <div className=\"nav-button__back-mb-button\">\n        <Button\n          handleOnClick={() => (handleOnClick())}\n          title=\"HOME\"\n          buttonType=\"all\"\n          align=\"center\"\n        />\n      </div>\n\n    </>\n  );\n};\n\nNavButton.propTypes = proptypes;\nNavButton.defaultProps = defaultProptypes;\n\nexport default NavButton;\n","import React from 'react';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport { getPopularityLabel } from '../../helpers/helper';\n\nconst propTypes = {\n  likes: PropTypes.number,\n  dislikes: PropTypes.number,\n  align: PropTypes.string,\n  bullet: PropTypes.bool,\n};\n\nconst defaultProps = {\n  likes: 0,\n  dislikes: 0,\n  align: 'left',\n  bullet: true,\n};\n\nconst PopularityLabel = (props) => {\n  const {\n    likes,\n    dislikes,\n    align,\n    bullet\n  } = props;\n  const labelValue = getPopularityLabel(likes, dislikes);\n  const classes = cx({\n    'popularity-label': true,\n    [`popularity-label--${labelValue.modifier}`]: true,\n    [`popularity-label--${align}`]: true,\n  });\n  return (\n    <div className={classes}>\n      {bullet\n      && (\n        <span>&bull;</span>\n      )}\n      {labelValue.label}\n    </div>\n  );\n};\n\nPopularityLabel.defaultProps = defaultProps;\nPopularityLabel.propTypes = propTypes;\n\nexport default PopularityLabel;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Label from '../Common/Label';\nimport PopularityLabel from './PopularityLabel';\nimport { getCategory, getJokeIndexById } from '../../helpers/helper';\n\nconst proptypes = {\n  title: PropTypes.string.isRequired,\n  categoryList: PropTypes.array,\n  description: PropTypes.string,\n  selectedJoke: PropTypes.object,\n};\n\nconst defaultProps = {\n  categoryList: [],\n  description: 'No description',\n  selectedJoke: {}\n};\n\nconst JokeStatContent = (props) => {\n  const {\n    title,\n    categoryList,\n    description,\n    selectedJoke: { likes, dislikes, id }\n  } = props;\n\n  const category = getCategory(categoryList);\n  const index = getJokeIndexById(id) + 1;\n\n  return (\n    <div className=\"joke-stat-content\">\n      <div className=\"joke-stat-content__category\">\n        <Label\n          labelContent={category}\n          type={category}\n          left\n          bullet\n        />\n        <PopularityLabel align=\"right\" likes={likes} dislikes={dislikes} />\n      </div>\n      <div className=\"joke-stat-content__wrapper\">\n        <div className=\"joke-stat-content__title\">\n          <h1 className=\"joke-stat-content__title-text\">\n            {title}\n          </h1>\n          <div className=\"joke-stat-content__number\">\n            <div className=\"joke-stat-content__divider\" />\n            <span>\n              NO #\n              {index}\n            </span>\n          </div>\n        </div>\n      </div>\n      <div className=\"joke-stat-content__description\">\n        <p>\n          {description}\n        </p>\n      </div>\n\n    </div>\n  );\n};\n\nJokeStatContent.propTypes = proptypes;\nJokeStatContent.defaultProps = defaultProps;\n\nexport default JokeStatContent;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nconst proptypes = {\n  handleClick: PropTypes.func,\n  type: PropTypes.string,\n  count: PropTypes.number,\n};\nconst defaultProps = {\n  handleClick: () => {\n  },\n  type: 'like',\n  count: 0,\n};\n\nconst VoteButton = (props) => {\n  const { type, handleClick, count } = props;\n  const imagePath = type === 'like' ? '/images/tup.svg' : '/images/tdown.svg';\n  const handClassnames = cx({\n    'vote-button__hand': true,\n    'vote-button__hand--dislike': type === 'dislike',\n  });\n  return (\n    <div\n      className={`vote-button vote-button--${type}`}\n      onClick={() => handleClick(type)}\n      role=\"button\"\n    >\n      <img className={handClassnames} src={imagePath} alt={type} />\n      <p className=\"vote-button__count\">\n        {count}\n      </p>\n    </div>\n  );\n};\n\nVoteButton.defaultProps = defaultProps;\nVoteButton.propTypes = proptypes;\n\nexport default VoteButton;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport VoteButton from './VoteButton';\n\nconst proptypes = {\n  handleClick: PropTypes.func,\n  likes: PropTypes.number,\n  dislikes: PropTypes.number,\n};\nconst defaultProps = {\n  handleClick: () => {\n  },\n  likes: 0,\n  dislikes: 0,\n};\n\nconst VotesCounter = (props) => {\n  const { handleClick, likes, dislikes } = props;\n  return (\n    <div className=\"votes-counter\">\n      <div className=\"votes-counter__button-wrapper votes-counter__button-wrapper--left\">\n        <VoteButton\n          type=\"like\"\n          handleClick={handleClick}\n          count={likes}\n        />\n      </div>\n      <div className=\"votes-counter__button-wrapper\">\n        <VoteButton\n          type=\"dislike\"\n          handleClick={handleClick}\n          count={dislikes}\n        />\n      </div>\n    </div>\n  );\n};\n\nVotesCounter.defaultProps = defaultProps;\nVotesCounter.propTypes = proptypes;\n\nexport default VotesCounter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '../Common/Button';\n\nconst proptypes = {\n  nextJoke: PropTypes.func.isRequired,\n  previousJoke: PropTypes.func.isRequired,\n};\n\nconst NavigationButtons = (props) => (\n  <div className=\"navigation-buttons\">\n    <Button\n      buttonType=\"joke-nav\"\n      title=\"prev joke\"\n      iconPath=\"/images/arrow-left.svg\"\n      iconPosition=\"left\"\n      border\n      handleOnClick={props.previousJoke}\n      align=\"left\"\n    />\n    <Button\n      buttonType=\"joke-nav\"\n      title=\"next joke\"\n      iconPath=\"/images/arrow-right.svg\"\n      iconPosition=\"right\"\n      border\n      handleOnClick={props.nextJoke}\n      align=\"right\"\n    />\n  </div>\n);\n\nNavigationButtons.propTypes = proptypes;\n\nexport default NavigationButtons;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport {\n  vote,\n  getAllJokes,\n  getJoke,\n} from '../actions/jokes';\nimport Card from '../components/Common/Card';\nimport List from '../components/Common/List';\nimport NavButton from '../components/Common/NavButton';\nimport Loading from '../components/Common/Loading';\nimport JokeStatContent from '../components/SingleJoke/JokeStatContent';\nimport VotesCounter from '../components/SingleJoke/VotesCounter';\nimport NavigationButtons from '../components/SingleJoke/NavigationButtons';\nimport {\n  sortByPopularity,\n  truncateText,\n  getJokeNextIndex,\n  getJokePrevIndex,\n} from '../helpers/helper';\n\nclass SingleJokeContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.goBack = this.goBack.bind(this);\n    this.nextJoke = this.nextJoke.bind(this);\n    this.previousJoke = this.previousJoke.bind(this);\n    this.voteJoke = this.voteJoke.bind(this);\n  }\n\n  componentDidMount() {\n    const { match, jokes: { list } } = this.props;\n    const id = match.params.id;\n    if (list.length < 1) {\n      getAllJokes();\n    }\n    getJoke(id);\n  }\n\n  componentDidUpdate(prevProps) {\n    const { match } = this.props;\n    const id = match.params.id;\n    if (prevProps.jokes.list < 1 || (prevProps.match.params.id !== id)) {\n      getJoke(id);\n    }\n  }\n\n  goBack() {\n    const { history } = this.props;\n    history.push('/');\n  }\n\n  nextJoke() {\n    const { selectedJoke, history, jokes: { list } } = this.props;\n    const index = getJokeNextIndex(selectedJoke.id);\n    if (index) {\n      const jokeId = list[index].id;\n      history.push(`/joke/${jokeId}`);\n    }\n  }\n\n  previousJoke() {\n    const { selectedJoke, history, jokes: { list } } = this.props;\n    const index = getJokePrevIndex(selectedJoke.id);\n    if (index) {\n      const jokeId = list[index].id;\n      history.push(`/joke/${jokeId}`);\n    }\n  }\n\n  voteJoke(type) {\n    const { votedIds, selectedJoke } = this.props;\n    if (!votedIds.includes(selectedJoke.id)) {\n      vote(selectedJoke, type);\n    } else {\n      alert('You already voted this joke');\n    }\n  }\n\n  render() {\n    const { selectedJoke, jokes: { list } } = this.props;\n    const updatedList = sortByPopularity(list.slice(0, 10));\n    const topList = (\n      <List\n        title=\"the top 10 jokes this week\"\n        list={updatedList}\n      />\n    );\n\n    if (!selectedJoke) {\n      return (\n        <Loading />\n      );\n    }\n\n    // NO TITLE IN THE DATA\n    const title = truncateText(selectedJoke.value, 14);\n    const joke = (\n      <JokeStatContent\n        description={selectedJoke.value}\n        categoryList={selectedJoke.categories}\n        title={title}\n        selectedJoke={selectedJoke}\n      />\n    );\n\n    return (\n      <div className=\"grid grid--items-top\">\n        <div className=\"grid__item-col grid__item-col--12\">\n          <NavButton\n            type=\"back\"\n            handleOnClick={this.goBack}\n          />\n        </div>\n        <div className=\"grid__item-col grid__item-col--8 grid__item-col--padding-right-30 grid__mb-item-col--12\">\n          <Card type=\"display\" content={joke} />\n          <div className=\"grid\">\n            <div className=\"grid__item-col grid__item-col--6 grid__mb-item-col--12\">\n              <VotesCounter\n                handleClick={this.voteJoke}\n                likes={selectedJoke.likes}\n                dislikes={selectedJoke.dislikes}\n              />\n            </div>\n            <div className=\"grid__item-col grid__item-col--6 grid__mb-item-col--12\">\n              <NavigationButtons nextJoke={this.nextJoke} previousJoke={this.previousJoke} />\n            </div>\n\n          </div>\n        </div>\n        <div className=\"grid__item-col grid__item-col--4 grid__mb-item-col--12\">\n          <Card content={topList} type=\"display\" />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(connect(\n  (state) => ({\n    jokes: state.jokes,\n    votedIds: state.jokes.votedIds,\n    selectedJoke: state.jokes.selectedJoke,\n    isLoading: state.isLoading,\n  }), {\n    getJoke,\n    vote,\n    getAllJokes,\n  }\n)(SingleJokeContainer));\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport connect from 'react-redux/es/connect/connect';\nimport Footer from './components/Common/Footer';\nimport Header from './components/Common/Header';\nimport AllJokesContainer from './containers/AllJokesContainer';\nimport SingleJokeContainer from './containers/SingleJokeContainer';\n\nconst proptypes = {\n  jokes: PropTypes.array,\n};\n\nconst defaultProps = {\n  jokes: [],\n};\n\nconst App = (props) => {\n  const { jokes } = props;\n  return (\n    <Router>\n      <div className=\"page-container\">\n        <Header jokes={jokes} />\n        <div className=\"container container--full\">\n          <Switch>\n            <Route path=\"/joke/:id\" component={SingleJokeContainer} />\n            <Route path=\"/\" component={AllJokesContainer} />\n          </Switch>\n        </div>\n        <Footer />\n      </div>\n    </Router>\n  );\n};\n\nApp.propTypes = proptypes;\nApp.defaultProps = defaultProps;\n\nexport default connect(\n  (state) => ({\n    isLoading: state.isLoading,\n    selectedCategory: state.jokes.selectedCategory,\n    jokes: state.jokes.list,\n  }),\n  {},\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n/* eslint-disable */\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n/* eslint-enable */\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport ReduxToastr from 'react-redux-toastr';\nimport './index.scss';\nimport App from './App';\nimport store from './config/store';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n    <ReduxToastr\n      timeOut={5000}\n      newestOnTop\n      position=\"top-right\"\n    />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}